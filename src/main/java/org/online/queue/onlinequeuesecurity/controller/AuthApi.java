/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.online.queue.onlinequeuesecurity.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.online.queue.onlinequeuesecurity.model.request.RefreshRequest;
import org.online.queue.onlinequeuesecurity.model.request.SignInRequest;
import org.online.queue.onlinequeuesecurity.model.request.SignUpRequest;
import org.online.queue.onlinequeuesecurity.model.request.SingOutRequest;
import org.online.queue.onlinequeuesecurity.model.response.ErrorResponse;
import org.online.queue.onlinequeuesecurity.model.response.SignInResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;
@Tag(name = "auth", description = "Everything about authorization")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/refresh : refresh token
     * refresh token
     *
     * @param refreshRequest request body for refreshing token (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "refresh",
        summary = "refresh token",
        description = "refresh token",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SignInResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read_queues", "write_queues" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/refresh",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<SignInResponse> refresh(
        @Parameter(name = "RefreshRequest", description = "request body for refreshing token", required = true) @RequestBody RefreshRequest refreshRequest
    );


    /**
     * POST /auth/signIn : user sign in
     * user sign in
     *
     * @param signInRequest request body for sign in (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or The specified resource was not found (status code 404)
     */
    @Operation(
        operationId = "signIn",
        summary = "user sign in",
        description = "user sign in",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SignInResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The specified resource was not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read_queues", "write_queues" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/signIn",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<SignInResponse> signIn(
        @Parameter(name = "SignInRequest", description = "request body for sign in", required = true) @RequestBody SignInRequest signInRequest
    );


    /**
     * POST /auth/signOut : logout user
     * logout user
     *
     * @param singOutRequest request body for sing out (required)
     * @return Success operation (status code 200)
     *         or Request from an unauthorized user or invalid credentials (status code 401)
     */
    @Operation(
        operationId = "signOut",
        summary = "logout user",
        description = "logout user",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success operation"),
            @ApiResponse(responseCode = "401", description = "Request from an unauthorized user or invalid credentials", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "write_queues", "read_queues" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/signOut",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> signOut(
        @Parameter(name = "SingOutRequest", description = "request body for sing out", required = true) @RequestBody SingOutRequest singOutRequest
    );


    /**
     * POST /auth/signUp : user registration
     * register new user
     *
     * @param signUpRequest request body for registration (required)
     * @return Successful operation (status code 201)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "signUp",
        summary = "user registration",
        description = "register new user",
        tags = { "auth" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successful operation"),
            @ApiResponse(responseCode = "400", description = "Invalid input", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={ "read_queues", "write_queues" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/auth/signUp",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> signUp(
        @Parameter(name = "SignUpRequest", description = "request body for registration", required = true) @RequestBody SignUpRequest signUpRequest
    );

}
